{"version":3,"sources":["Buttons.tsx","Count.tsx","Button.tsx","Inputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","props","className","onClick","incCount","disabled","incButtonDisabled","resetCount","resetButtonDisabled","Count","span","value","Button","Inputs","style","height","htmlFor","fontSize","marginRight","type","id","onChange","onChangeMaxValue","maxValue","marginTop","onChangeStartValue","startValue","App","useState","count","setCount","maxCount","setMaxCount","startCount","setStartCount","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","maxValueAsString","newMaxValue","startValueAsString","newStartValue","e","newCount","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15a5c66e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ButtonsPropsType = {\r\n    incCount: () => void\r\n    resetCount: () => void\r\n    incButtonDisabled: boolean\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport function Buttons (props: ButtonsPropsType) {\r\n    return(\r\n        <div className='div-b'>\r\n            <button className='button' onClick={props.incCount} disabled={props.incButtonDisabled} >inc</button>\r\n            <button className='button-v' onClick={props.resetCount} disabled={props.resetButtonDisabled}>reset</button>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nexport type CountType = {\r\n    value: number\r\n    span: string\r\n}\r\n\r\nexport function Count (props: CountType) {\r\n    return(\r\n        <span className={props.span}>\r\n            {props.value}\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    onClick: () => void\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return(\r\n        <div className='div-b'>\r\n            <button className='button' onClick={props.onClick}>set</button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport function Inputs(props: InputsType) {\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"ml\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n            <input className='input' type=\"number\" id='ml' onChange={props.onChangeMaxValue} value={props.maxValue} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"sv\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className='input' type=\"number\" id='sv' onChange={props.onChangeStartValue} value={props.startValue}/>\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Buttons} from \"./Buttons\";\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\n\nfunction App() {\n\n\n    const [count, setCount] = useState(0)\n    const [maxCount, setMaxCount] = useState(10)\n    const [startCount, setStartCount] = useState(0)\n    const incCount = () => {\n        if (count < maxCount) {\n            setCount(count + 1)\n        }\n    }\n\n    // const reset = () => {\n    //     let startCount = localStorage.getItem('startValue')\n    //     if (startCount) {\n    //         let startCountFromStorage = JSON.parse(startCount)\n    //         setCount(startCountFromStorage)\n    //     }\n    // }\n\n    const resetCount = () => {\n        setCount(startCount)\n    }\n\n    const setButton = () => {\n        setCount(startCount)\n        setMaxCount(maxCount)\n    }\n    // function changeMaxCount(newMaxCountValue: string) {\n    //\n    //     let MaxValue = JSON.parse(newMaxCountValue)\n    //     if (MaxValue) {\n    //          setMaxCount(MaxValue)\n    //     }\n    // }\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterValue')\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setCount(newValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(count))\n    }, [count])\n\n    useEffect(() => {\n        let maxValueAsString = localStorage.getItem('maxValue')\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            setMaxCount(newMaxValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxCount))\n    }, [maxCount])\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem('startValue')\n        if (startValueAsString) {\n            let newStartValue = JSON.parse(startValueAsString)\n            setStartCount(newStartValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startCount))\n    }, [startCount])\n\n\n    const incButtonDisabled = count === maxCount\n    const resetButtonDisabled = count === startCount\n\n    const span = count === maxCount ? 'span-v' : 'span'\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let newCount = JSON.parse(e.currentTarget.value)\n        setMaxCount(newCount)\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let newCount = JSON.parse(e.currentTarget.value)\n        setStartCount(newCount)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-v'>\n                <Inputs maxValue={maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={startCount}\n                        onChangeStartValue={onChangeStartValue} />\n                <Button onClick={setButton} />\n            </div>\n            <div className='div-v'>\n                <Count value={count}\n                       span={span}\n                />\n                <Buttons incCount={incCount}\n                         resetCount={resetCount}\n                         incButtonDisabled={incButtonDisabled}\n                         resetButtonDisabled={resetButtonDisabled}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}