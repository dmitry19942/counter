{"version":3,"sources":["reportWebVitals.ts","Count.tsx","Button.tsx","Inputs.tsx","counter-reducer.ts","AppWithRedux.tsx","store.ts","localStorage.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Count","props","className","enterSetButton","incorrectValue","value","maxValue","Button","id","onClick","disabled","nameButton","Inputs","style","height","htmlFor","fontSize","marginRight","errorMaxValue","type","onChange","onChangeMaxValue","onKeyPress","marginTop","errorStartValue","onChangeStartValue","startValue","initialState","count","maxCount","startCount","buttonSetDisabled","incButtonDisabled","resetButtonDisabled","activeButtonInc","StartValueMaxValueIsCorrectAC","MaxValueIsCorrectAC","IncAndResetButtonDisabledAC","EnterSetButtonTitleShowAC","ActiveButtonIncAC","AppWithRedux","dispatch","useDispatch","counter","useSelector","state","useEffect","setButton","e","currentTarget","parseInt","focusButtonSet","document","getElementById","key","focus","setTimeout","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render"],"mappings":"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","file":"static/js/main.10cf294f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\nexport type CountType = {\r\n    value: number\r\n    maxValue: number\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count(props: CountType) {\r\n    return (\r\n        <span\r\n            className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.value === props.maxValue ? '' : 'span'}>\r\n             {props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value === props.maxValue ?\r\n                 <span className={'span-max-value'}>\r\n                 <div className={'span-count'}>{props.value}</div>\r\n                 <div className={'span-text'}>It is max value. Press 'reset'</div>\r\n             </span> : props.value}\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    id: string\r\n    className: 'button' | 'button-v' | 'button-active'\r\n    onClick: () => void\r\n    disabled: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return (\r\n            <button id={props.id} className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.nameButton} </button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"maxValue\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='maxValue' onChange={props.onChangeMaxValue} value={props.maxValue} onKeyPress={props.onKeyPress} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"startValue\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='startValue' onChange={props.onChangeStartValue} value={props.startValue} onKeyPress={props.onKeyPress} />\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import {CounterStateType} from \"./AppWithRedux\";\r\n\r\n// types\r\ntype IncCountActionType = {\r\n    type: 'INC-COUNT'\r\n    count: number\r\n}\r\ntype ChangeMaxCountActionType = {\r\n    type: 'CHANGE-MAX-VALUE',\r\n    maxCount: number\r\n}\r\ntype ChangeStartCountActionType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    startCount: number\r\n}\r\ntype ResetCountActionType = {\r\n    type: 'RESET-COUNT',\r\n    count: number,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype SetButtonActionType = {\r\n    type: 'SET-BUTTON',\r\n    count: number,\r\n    maxCount: number,\r\n    buttonSetDisabled: boolean,\r\n    enterSetButton: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype StartValueMaxValueIsCorrectActionType = {\r\n    type: 'START-VALUE-MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean,\r\n    errorStartValue: boolean,\r\n    buttonSetDisabled: boolean,\r\n    incorrectValue: boolean\r\n}\r\ntype MaxValueIsCorrectActionType = {\r\n    type: 'MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean\r\n}\r\ntype IncAndResetButtonDisabledActionType = {\r\n    type: 'INC-AND-RESET-BUTTON-DISABLED',\r\n    incButtonDisabled: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype EnterSetButtonTitleShowActionType = {\r\n    type: 'ENTER-SET-BUTTON-TITLE-SHOW',\r\n    enterSetButton: boolean\r\n}\r\ntype ResetButtonDisabledActionType = {\r\n    type: 'RESET-BUTTON-DISABLED',\r\n    resetButtonDisabled: boolean\r\n}\r\ntype ActiveButtonIncActionType = {\r\n    type: 'ACTIVE-BUTTON-INC',\r\n    activeButtonInc: boolean\r\n}\r\n\r\nexport type ActionsType = IncCountActionType | ChangeMaxCountActionType | ChangeStartCountActionType | ResetCountActionType | SetButtonActionType | StartValueMaxValueIsCorrectActionType | MaxValueIsCorrectActionType | IncAndResetButtonDisabledActionType | EnterSetButtonTitleShowActionType | ResetButtonDisabledActionType | ActiveButtonIncActionType\r\n\r\n// state\r\nconst initialState: CounterStateType = {\r\n    count: 0,\r\n    maxCount: 10,\r\n    startCount: 0,\r\n    errorMaxValue: false,\r\n    errorStartValue: false,\r\n    buttonSetDisabled: true,\r\n    enterSetButton: false,\r\n    incorrectValue: false,\r\n    incButtonDisabled: false,\r\n    resetButtonDisabled: false,\r\n    activeButtonInc: false\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {...state, count: action.count + 1 }\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return {...state, maxCount: action.maxCount}\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            return {...state, startCount: action.startCount}\r\n        }\r\n        case 'RESET-COUNT': {\r\n            return {...state, count: action.count, resetButtonDisabled: true}\r\n        }\r\n        case 'SET-BUTTON': {\r\n            return {...state, count: action.count, maxCount: action.maxCount, buttonSetDisabled: true, enterSetButton: false, resetButtonDisabled: true}\r\n        }\r\n        case 'START-VALUE-MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue, errorStartValue: action.errorStartValue, buttonSetDisabled: action.buttonSetDisabled, incorrectValue: action.incorrectValue}\r\n        }\r\n        case 'MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue}\r\n        }\r\n        case 'INC-AND-RESET-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: action.incButtonDisabled, resetButtonDisabled: action.resetButtonDisabled }\r\n        }\r\n        case 'ENTER-SET-BUTTON-TITLE-SHOW': {\r\n            return {...state, enterSetButton: action.enterSetButton}\r\n        }\r\n        case 'RESET-BUTTON-DISABLED': {\r\n            return {...state, resetButtonDisabled: action.resetButtonDisabled}\r\n        }\r\n        case 'ACTIVE-BUTTON-INC': {\r\n            return {...state, activeButtonInc: action.activeButtonInc}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const IncCountAC = (count: number): IncCountActionType => {\r\n    return {type: 'INC-COUNT', count}\r\n}\r\nexport const ChangeMaxValueAC = (maxCount: number): ChangeMaxCountActionType => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxCount}\r\n}\r\nexport const ChangeStartValueAC = (startCount: number): ChangeStartCountActionType => {\r\n    return {type: 'CHANGE-START-VALUE', startCount}\r\n}\r\nexport const ResetCountAC = (count: number, resetButtonDisabled: boolean): ResetCountActionType => {\r\n    return {type: 'RESET-COUNT', count, resetButtonDisabled}\r\n}\r\nexport const SetButtonAC = (count: number, maxCount: number, buttonSetDisabled: boolean, enterSetButton: boolean, resetButtonDisabled: boolean): SetButtonActionType => {\r\n    return {type: 'SET-BUTTON', count, maxCount, buttonSetDisabled, enterSetButton, resetButtonDisabled}\r\n}\r\nexport const StartValueMaxValueIsCorrectAC = (errorMaxValue: boolean, errorStartValue: boolean, buttonSetDisabled: boolean, incorrectValue: boolean): StartValueMaxValueIsCorrectActionType => {\r\n    return {type: 'START-VALUE-MAX-VALUE-IS-CORRECT', errorMaxValue, errorStartValue, buttonSetDisabled, incorrectValue}\r\n}\r\nexport const MaxValueIsCorrectAC = (errorMaxValue: boolean): MaxValueIsCorrectActionType => {\r\n    return {type: 'MAX-VALUE-IS-CORRECT', errorMaxValue}\r\n}\r\nexport const IncAndResetButtonDisabledAC = (incButtonDisabled: boolean, resetButtonDisabled: boolean): IncAndResetButtonDisabledActionType => {\r\n    return {type: 'INC-AND-RESET-BUTTON-DISABLED', incButtonDisabled, resetButtonDisabled}\r\n}\r\nexport const EnterSetButtonTitleShowAC = (enterSetButton: boolean): EnterSetButtonTitleShowActionType => {\r\n    return {type: 'ENTER-SET-BUTTON-TITLE-SHOW', enterSetButton}\r\n}\r\nexport const ResetButtonDisabledAC = (resetButtonDisabled: boolean): ResetButtonDisabledActionType => {\r\n    return {type: 'RESET-BUTTON-DISABLED', resetButtonDisabled}\r\n}\r\nexport const ActiveButtonIncAC = (activeButtonInc: boolean): ActiveButtonIncActionType => {\r\n    return {type: 'ACTIVE-BUTTON-INC', activeButtonInc}\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useEffect} from 'react';\nimport './App.css';\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\nimport {\n    ActiveButtonIncAC,\n    ChangeMaxValueAC,\n    ChangeStartValueAC,\n    EnterSetButtonTitleShowAC, IncAndResetButtonDisabledAC, IncCountAC,\n    MaxValueIsCorrectAC, ResetButtonDisabledAC,\n    ResetCountAC,\n    SetButtonAC, StartValueMaxValueIsCorrectAC\n} from \"./counter-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"./store\";\n\n// types\nexport type CounterStateType = {\n    count: number\n    maxCount: number\n    startCount: number\n    errorMaxValue: boolean\n    errorStartValue: boolean\n    buttonSetDisabled: boolean\n    enterSetButton: boolean\n    incorrectValue: boolean\n    incButtonDisabled: boolean\n    resetButtonDisabled: boolean\n    activeButtonInc: boolean\n}\n\n// component\nfunction AppWithRedux() {\n\n    const dispatch = useDispatch()\n\n    const counter = useSelector<RootState, CounterStateType>(state => state.counter)\n\n    useEffect(() => {\n        if (counter.startCount === null) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        } else if (counter.startCount >= counter.maxCount) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        } else if (counter.startCount < 0) {\n            dispatch(StartValueMaxValueIsCorrectAC(false, true, true, true))\n        } else if (counter.startCount < counter.maxCount) {\n            dispatch(StartValueMaxValueIsCorrectAC(false, false, false, false))\n        }\n    }, [counter.startCount, counter.maxCount, dispatch])\n\n    useEffect(() => {\n        if (counter.maxCount <= 0) {\n            dispatch(MaxValueIsCorrectAC(true))\n        } else if (counter.maxCount > 0 && counter.maxCount > counter.startCount) {\n            dispatch(MaxValueIsCorrectAC(false))\n        }\n    }, [counter.maxCount, counter.startCount, dispatch])\n\n    useEffect(() => {\n        if (!counter.incorrectValue && !counter.errorStartValue && !counter.errorMaxValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, false))\n        } else if (counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(true, true))\n        } else if (counter.errorStartValue || counter.errorMaxValue) {\n            dispatch(IncAndResetButtonDisabledAC(true, true))\n        }\n    }, [counter.incorrectValue, counter.errorStartValue, counter.errorMaxValue, dispatch])\n\n    useEffect(() => {\n        if (!counter.buttonSetDisabled) {\n            dispatch(EnterSetButtonTitleShowAC(true))\n        } else {\n            dispatch(EnterSetButtonTitleShowAC(false))\n        }\n    }, [counter.buttonSetDisabled, dispatch])\n\n    useEffect(() => {\n        if (counter.enterSetButton) {\n            dispatch(IncAndResetButtonDisabledAC(true, true))\n        } else if (counter.count === counter.maxCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(true, false))\n        } else if (counter.count !== counter.maxCount && counter.count !== counter.startCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, false))\n        } else if (counter.count === counter.startCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, true))\n        } else if (counter.count !== counter.startCount && !counter.incorrectValue) {\n            dispatch(ResetButtonDisabledAC(false))\n        }\n    }, [counter.enterSetButton, counter.count, counter.maxCount, counter.startCount, counter.incorrectValue, dispatch])\n\n\n    const activeButtonInc = () => {\n        dispatch(ActiveButtonIncAC(false))\n    }\n\n    const incCount = () => {\n        if (counter.count < counter.maxCount) {\n            dispatch(IncCountAC(counter.count))\n            dispatch(ActiveButtonIncAC(true))\n            setTimeout(activeButtonInc, 100)\n        }\n    }\n\n    const resetCount = () => {\n        dispatch(ResetCountAC(counter.startCount, counter.resetButtonDisabled))\n    }\n\n    const setButton = () => {\n        dispatch(SetButtonAC(counter.startCount, counter.maxCount, counter.buttonSetDisabled, counter.enterSetButton, counter.resetButtonDisabled))\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        }\n        dispatch(ChangeMaxValueAC(parseInt(e.currentTarget.value)))\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        }\n        dispatch(ChangeStartValueAC(parseInt(e.currentTarget.value)))\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        const focusButtonSet = document.getElementById('button-set')\n        if (e.key === 'Enter' && focusButtonSet) {\n            setButton()\n            focusButtonSet.focus()\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-value'>\n                <Inputs maxValue={counter.maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={counter.startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={counter.errorMaxValue}\n                        errorStartValue={counter.errorStartValue}\n                        onKeyPress={onKeyPressHandler}\n                />\n                <div className='div-button'>\n                    <Button id={'button-set'}\n                            className={'button'}\n                            nameButton={'set'}\n                            onClick={setButton}\n                            disabled={counter.buttonSetDisabled}\n                    />\n                </div>\n            </div>\n            <div className='div-value'>\n                <Count value={counter.count}\n                       maxValue={counter.maxCount}\n                       incorrectValue={counter.incorrectValue}\n                       enterSetButton={counter.enterSetButton}\n                />\n                <div className='div-button'>\n                    <Button id={'button-inc'}\n                            className={counter.activeButtonInc ? 'button-active' : 'button'}\n                            onClick={incCount}\n                            disabled={counter.incButtonDisabled}\n                            nameButton={'inc'}\n                    />\n                    <Button id={'button-reset'}\n                            className={'button-v'}\n                            onClick={resetCount}\n                            disabled={counter.resetButtonDisabled}\n                            nameButton={'reset'}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"./localStorage\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n      counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {RootState} from \"./store\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: RootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <AppWithRedux />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}