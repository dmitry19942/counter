{"version":3,"sources":["Buttons.tsx","Count.tsx","Button.tsx","Inputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","props","className","onClick","incCount","disabled","incButtonDisabled","resetCount","resetButtonDisabled","Count","enterSetButton","incorrectValue","span","value","Button","Inputs","style","height","htmlFor","fontSize","marginRight","errorMaxValue","type","id","onChange","onChangeMaxValue","maxValue","marginTop","errorStartValue","onChangeStartValue","startValue","App","useState","count","setCount","maxCount","setMaxCount","startCount","setStartCount","setErrorMaxValue","setErrorStartValue","buttonSetDisabled","setButtonSetDisabled","setEnterSetButton","setIncorrectValue","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","maxValueAsString","newMaxValue","startValueAsString","newStartValue","e","newCount","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4151882d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ButtonsPropsType = {\r\n    incCount: () => void\r\n    resetCount: () => void\r\n    incButtonDisabled: boolean\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport function Buttons (props: ButtonsPropsType) {\r\n    return(\r\n        <div className='div-b'>\r\n            <button className='button' onClick={props.incCount} disabled={props.incButtonDisabled} >inc</button>\r\n            <button className='button-v' onClick={props.resetCount} disabled={props.resetButtonDisabled}>reset</button>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nexport type CountType = {\r\n    value: number\r\n    span: string\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count (props: CountType) {\r\n    return(\r\n        <span className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.span}>\r\n             { props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value }\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    onClick: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return(\r\n        <div className='div-b'>\r\n            <button className='button' onClick={props.onClick} disabled={props.disabled}>set</button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n}\r\n\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"ml\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='ml' onChange={props.onChangeMaxValue} value={props.maxValue} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"sv\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='sv' onChange={props.onChangeStartValue} value={props.startValue}/>\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Buttons} from \"./Buttons\";\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\n\nfunction App() {\n\n\n    const [count, setCount] = useState(0)\n    const [maxCount, setMaxCount] = useState(10)\n    const [startCount, setStartCount] = useState(0)\n\n    const [errorMaxValue, setErrorMaxValue] = useState<boolean>(false)\n    const [errorStartValue, setErrorStartValue] = useState<boolean>(false)\n    const [buttonSetDisabled, setButtonSetDisabled] = useState<boolean>(true)\n    const [enterSetButton, setEnterSetButton] = useState<boolean>(false)\n    const [incorrectValue, setIncorrectValue] = useState<boolean>(false)\n\n    useEffect(() => {\n        if(startCount >= maxCount) {\n            setErrorMaxValue(true)\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if (startCount < 0) {\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if(startCount < maxCount) {\n            setErrorMaxValue(false)\n            setErrorStartValue(false)\n            setButtonSetDisabled(false)\n            setIncorrectValue(false)\n        }\n    }, [startCount, maxCount, errorMaxValue, errorStartValue])\n\n    useEffect(() => {\n        if(!buttonSetDisabled) {\n            setEnterSetButton(true)\n        } else {\n            setEnterSetButton(false)\n        }\n    }, [buttonSetDisabled])\n\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterValue')\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setCount(newValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(count))\n        setButtonSetDisabled(true)\n    }, [count])\n\n    useEffect(() => {\n        let maxValueAsString = localStorage.getItem('maxValue')\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            setMaxCount(newMaxValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxCount))\n    }, [maxCount])\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem('startValue')\n        if (startValueAsString) {\n            let newStartValue = JSON.parse(startValueAsString)\n            setStartCount(newStartValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startCount))\n    }, [startCount])\n\n    const incCount = () => {\n        if (count < maxCount) {\n            setCount(count + 1)\n        }\n    }\n\n    const resetCount = () => {\n        setCount(startCount)\n    }\n\n    const setButton = () => {\n        setCount(startCount)\n        setMaxCount(maxCount)\n        setButtonSetDisabled(true)\n    }\n\n    const incButtonDisabled = count === maxCount\n    const resetButtonDisabled = count === startCount\n\n    const span = count === maxCount ? 'span-v' : 'span'\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let newCount = JSON.parse(e.currentTarget.value)\n        setMaxCount(newCount)\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let newCount = JSON.parse(e.currentTarget.value)\n        setStartCount(newCount)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-v'>\n                <Inputs maxValue={maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={errorMaxValue}\n                        errorStartValue={errorStartValue}\n                />\n                <Button onClick={setButton}\n                        disabled={buttonSetDisabled}\n                />\n            </div>\n            <div className='div-v'>\n                <Count value={count}\n                       span={span}\n                       incorrectValue={incorrectValue}\n                       enterSetButton={enterSetButton}\n                />\n                <Buttons incCount={incCount}\n                         resetCount={resetCount}\n                         incButtonDisabled={incButtonDisabled}\n                         resetButtonDisabled={resetButtonDisabled}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}