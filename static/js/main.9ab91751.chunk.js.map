{"version":3,"sources":["reportWebVitals.ts","counter-reducer.ts","store.ts","localStorage.ts","Count.tsx","Button.tsx","Inputs.tsx","AppWithRedux.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","count","maxCount","startCount","errorMaxValue","errorStartValue","buttonSetDisabled","enterSetButton","incorrectValue","incButtonDisabled","resetButtonDisabled","activeButtonInc","autoButtonDisabled","timerId","IncCountAC","type","StartValueMaxValueIsCorrectAC","MaxValueIsCorrectAC","IncAndResetButtonDisabledAC","IncAndResetAndAutoButtonDisabledAC","EnterSetButtonTitleShowAC","ActiveButtonIncAC","rootReducer","combineReducers","counter","state","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","window","Count","props","className","value","maxValue","Button","id","onClick","disabled","nameButton","Inputs","style","height","htmlFor","fontSize","marginRight","onChange","onChangeMaxValue","onKeyPress","marginTop","onChangeStartValue","startValue","AppWithRedux","dispatch","useDispatch","useSelector","useEffect","setTimeout","setButton","clearTimeout","e","currentTarget","parseInt","focusButtonSet","document","getElementById","key","focus","ReactDOM","render"],"mappings":"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","file":"static/js/main.9ab91751.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CounterStateType} from \"./AppWithRedux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootState} from \"./store\";\r\nimport {SetStateAction} from \"react\";\r\n\r\n// types\r\ntype IncCountActionType = {\r\n    type: 'INC-COUNT'\r\n    count: number\r\n}\r\ntype ChangeMaxCountActionType = {\r\n    type: 'CHANGE-MAX-VALUE',\r\n    maxCount: number\r\n}\r\ntype ChangeStartCountActionType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    startCount: number\r\n}\r\ntype ResetCountActionType = {\r\n    type: 'RESET-COUNT',\r\n    count: number,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype SetButtonActionType = {\r\n    type: 'SET-BUTTON',\r\n    count: number,\r\n    maxCount: number,\r\n    buttonSetDisabled: boolean,\r\n    enterSetButton: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype StartValueMaxValueIsCorrectActionType = {\r\n    type: 'START-VALUE-MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean,\r\n    errorStartValue: boolean,\r\n    buttonSetDisabled: boolean,\r\n    incorrectValue: boolean\r\n}\r\ntype MaxValueIsCorrectActionType = {\r\n    type: 'MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean\r\n}\r\ntype IncAndResetButtonDisabledActionType = {\r\n    type: 'INC-AND-RESET-BUTTON-DISABLED',\r\n    incButtonDisabled: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype IncAndResetAndAutoButtonDisabledActionType = {\r\n    type: 'INC-AND-RESET-AND-AUTO-BUTTON-DISABLED',\r\n    incButtonDisabled: boolean,\r\n    resetButtonDisabled: boolean,\r\n    autoButtonDisabled: boolean\r\n}\r\ntype EnterSetButtonTitleShowActionType = {\r\n    type: 'ENTER-SET-BUTTON-TITLE-SHOW',\r\n    enterSetButton: boolean\r\n}\r\ntype ResetButtonDisabledActionType = {\r\n    type: 'RESET-BUTTON-DISABLED',\r\n    resetButtonDisabled: boolean\r\n}\r\ntype ActiveButtonIncActionType = {\r\n    type: 'ACTIVE-BUTTON-INC',\r\n    activeButtonInc: boolean\r\n}\r\ntype SetTimerIdActionType = {\r\n    type: 'SET-TIMER-ID',\r\n    timerId: SetStateAction<any>\r\n}\r\ntype ToggleAutoButtonDisabledActionType = {\r\n    type: 'TOGGLE-AUTO-BUTTON-DISABLED'\r\n}\r\ntype ResetAutoButtonDisabledActionType = {\r\n    type: 'RESET-AUTO-BUTTON-DISABLED'\r\n}\r\ntype IncButtonDisabledActionType = {\r\n    type: 'INC-BUTTON-DISABLED'\r\n}\r\n\r\nexport type ActionsType = IncCountActionType | ChangeMaxCountActionType | ChangeStartCountActionType | ResetCountActionType | SetButtonActionType | StartValueMaxValueIsCorrectActionType | MaxValueIsCorrectActionType | IncAndResetButtonDisabledActionType | IncAndResetAndAutoButtonDisabledActionType | EnterSetButtonTitleShowActionType | ResetButtonDisabledActionType | ActiveButtonIncActionType | SetTimerIdActionType | ToggleAutoButtonDisabledActionType | ResetAutoButtonDisabledActionType | IncButtonDisabledActionType\r\n\r\n// state\r\nconst initialState: CounterStateType = {\r\n    count: 0,\r\n    maxCount: 10,\r\n    startCount: 0,\r\n    errorMaxValue: false,\r\n    errorStartValue: false,\r\n    buttonSetDisabled: true,\r\n    enterSetButton: false,\r\n    incorrectValue: false,\r\n    incButtonDisabled: false,\r\n    resetButtonDisabled: false,\r\n    activeButtonInc: false,\r\n    autoButtonDisabled: false,\r\n    timerId: 0\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {...state, count: action.count + 1 }\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return {...state, maxCount: action.maxCount}\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            return {...state, startCount: action.startCount}\r\n        }\r\n        case 'RESET-COUNT': {\r\n            return {...state, count: action.count, resetButtonDisabled: true}\r\n        }\r\n        case 'SET-BUTTON': {\r\n            return {...state, count: action.count, maxCount: action.maxCount, buttonSetDisabled: true, enterSetButton: false, resetButtonDisabled: true}\r\n        }\r\n        case 'START-VALUE-MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue, errorStartValue: action.errorStartValue, buttonSetDisabled: action.buttonSetDisabled, incorrectValue: action.incorrectValue}\r\n        }\r\n        case 'MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue}\r\n        }\r\n        case 'INC-AND-RESET-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: action.incButtonDisabled, resetButtonDisabled: action.resetButtonDisabled}\r\n        }\r\n        case 'INC-AND-RESET-AND-AUTO-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: action.incButtonDisabled, resetButtonDisabled: action.resetButtonDisabled, autoButtonDisabled: action.autoButtonDisabled}\r\n        }\r\n        case 'ENTER-SET-BUTTON-TITLE-SHOW': {\r\n            return {...state, enterSetButton: action.enterSetButton}\r\n        }\r\n        case 'RESET-BUTTON-DISABLED': {\r\n            return {...state, resetButtonDisabled: action.resetButtonDisabled}\r\n        }\r\n        case 'ACTIVE-BUTTON-INC': {\r\n            return {...state, activeButtonInc: action.activeButtonInc}\r\n        }\r\n        case 'SET-TIMER-ID': {\r\n            return {...state, timerId: action.timerId}\r\n        }\r\n        case 'TOGGLE-AUTO-BUTTON-DISABLED': {\r\n            return {...state, autoButtonDisabled: !state.autoButtonDisabled}\r\n        }\r\n        case 'RESET-AUTO-BUTTON-DISABLED': {\r\n            return {...state, autoButtonDisabled: false}\r\n        }\r\n        case 'INC-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: true}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const IncCountAC = (count: number): IncCountActionType => {\r\n    return {type: 'INC-COUNT', count}\r\n}\r\nexport const ChangeMaxValueAC = (maxCount: number): ChangeMaxCountActionType => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxCount}\r\n}\r\nexport const ChangeStartValueAC = (startCount: number): ChangeStartCountActionType => {\r\n    return {type: 'CHANGE-START-VALUE', startCount}\r\n}\r\nexport const ResetCountAC = (count: number, resetButtonDisabled: boolean): ResetCountActionType => {\r\n    return {type: 'RESET-COUNT', count, resetButtonDisabled}\r\n}\r\nexport const SetButtonAC = (count: number, maxCount: number, buttonSetDisabled: boolean, enterSetButton: boolean, resetButtonDisabled: boolean): SetButtonActionType => {\r\n    return {type: 'SET-BUTTON', count, maxCount, buttonSetDisabled, enterSetButton, resetButtonDisabled}\r\n}\r\nexport const StartValueMaxValueIsCorrectAC = (errorMaxValue: boolean, errorStartValue: boolean, buttonSetDisabled: boolean, incorrectValue: boolean): StartValueMaxValueIsCorrectActionType => {\r\n    return {type: 'START-VALUE-MAX-VALUE-IS-CORRECT', errorMaxValue, errorStartValue, buttonSetDisabled, incorrectValue}\r\n}\r\nexport const MaxValueIsCorrectAC = (errorMaxValue: boolean): MaxValueIsCorrectActionType => {\r\n    return {type: 'MAX-VALUE-IS-CORRECT', errorMaxValue}\r\n}\r\nexport const IncAndResetButtonDisabledAC = (incButtonDisabled: boolean, resetButtonDisabled: boolean): IncAndResetButtonDisabledActionType => {\r\n    return {type: 'INC-AND-RESET-BUTTON-DISABLED', incButtonDisabled, resetButtonDisabled}\r\n}\r\nexport const IncAndResetAndAutoButtonDisabledAC = (incButtonDisabled: boolean, resetButtonDisabled: boolean, autoButtonDisabled: boolean): IncAndResetAndAutoButtonDisabledActionType => {\r\n    return {type: 'INC-AND-RESET-AND-AUTO-BUTTON-DISABLED', incButtonDisabled, resetButtonDisabled, autoButtonDisabled}\r\n}\r\nexport const EnterSetButtonTitleShowAC = (enterSetButton: boolean): EnterSetButtonTitleShowActionType => {\r\n    return {type: 'ENTER-SET-BUTTON-TITLE-SHOW', enterSetButton}\r\n}\r\nexport const ResetButtonDisabledAC = (resetButtonDisabled: boolean): ResetButtonDisabledActionType => {\r\n    return {type: 'RESET-BUTTON-DISABLED', resetButtonDisabled}\r\n}\r\nexport const ActiveButtonIncAC = (activeButtonInc: boolean): ActiveButtonIncActionType => {\r\n    return {type: 'ACTIVE-BUTTON-INC', activeButtonInc}\r\n}\r\nexport const SetTimerIdAC = (timerId: SetStateAction<any>): SetTimerIdActionType => {\r\n    return {type: 'SET-TIMER-ID', timerId}\r\n}\r\nexport const ToggleAutoButtonDisabledAC = (): ToggleAutoButtonDisabledActionType => {\r\n    return {type: 'TOGGLE-AUTO-BUTTON-DISABLED'}\r\n}\r\nexport const ResetAutoButtonDisabledAC = (): ResetAutoButtonDisabledActionType => {\r\n    return {type: 'RESET-AUTO-BUTTON-DISABLED'}\r\n}\r\nexport const IncButtonDisabledAC = (): IncButtonDisabledActionType => {\r\n    return {type: 'INC-BUTTON-DISABLED'}\r\n}\r\n\r\n\r\n// thunks\r\nexport const toggleAutoModeCounterTC = () => (dispatch: Dispatch, getState: () => RootState) => {\r\n    let {count, maxCount, autoButtonDisabled} = getState().counter\r\n    autoButtonDisabled && dispatch(SetTimerIdAC(setTimeout(() => {\r\n        if (count < maxCount ) {\r\n            dispatch(IncCountAC(count));\r\n        }\r\n    }, 1000)))\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"./localStorage\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n      counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {RootState} from \"./store\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: RootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport type CountType = {\r\n    value: number\r\n    maxValue: number\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count(props: CountType) {\r\n    return (\r\n        <span\r\n            className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.value === props.maxValue ? '' : 'span'}>\r\n             {props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value === props.maxValue ?\r\n                 <span className={'span-max-value'}>\r\n                 <div className={'span-count'}>{props.value}</div>\r\n                 <div className={'span-text'}>It is max value. Press 'reset'</div>\r\n             </span> : props.value}\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    id: string\r\n    className: 'button' | 'button-v' | 'button-active'\r\n    onClick: () => void\r\n    disabled: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return (\r\n            <button id={props.id} className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.nameButton} </button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"maxValue\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='maxValue' onChange={props.onChangeMaxValue} value={props.maxValue} onKeyPress={props.onKeyPress} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"startValue\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='startValue' onChange={props.onChangeStartValue} value={props.startValue} onKeyPress={props.onKeyPress} />\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, SetStateAction, useEffect} from 'react';\nimport './App.css';\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\nimport {\n    ActiveButtonIncAC,\n    ChangeMaxValueAC,\n    ChangeStartValueAC,\n    EnterSetButtonTitleShowAC,\n    IncAndResetAndAutoButtonDisabledAC,\n    IncAndResetButtonDisabledAC,\n    IncButtonDisabledAC,\n    IncCountAC,\n    MaxValueIsCorrectAC,\n    ResetAutoButtonDisabledAC,\n    ResetButtonDisabledAC,\n    ResetCountAC,\n    SetButtonAC,\n    StartValueMaxValueIsCorrectAC,\n    ToggleAutoButtonDisabledAC,\n    toggleAutoModeCounterTC\n} from \"./counter-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"./store\";\n\n// types\nexport type CounterStateType = {\n    count: number\n    maxCount: number\n    startCount: number\n    errorMaxValue: boolean\n    errorStartValue: boolean\n    buttonSetDisabled: boolean\n    enterSetButton: boolean\n    incorrectValue: boolean\n    incButtonDisabled: boolean\n    resetButtonDisabled: boolean\n    activeButtonInc: boolean\n    autoButtonDisabled: boolean\n    timerId: SetStateAction<any>\n}\n\n// component\nfunction AppWithRedux() {\n\n    const dispatch = useDispatch()\n\n    const counter = useSelector<RootState, CounterStateType>(state => state.counter)\n\n    useEffect(() => {\n        if (counter.startCount === null) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        } else if (counter.startCount >= counter.maxCount) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        } else if (counter.startCount < 0) {\n            dispatch(StartValueMaxValueIsCorrectAC(false, true, true, true))\n        } else if (counter.startCount < counter.maxCount) {\n            dispatch(StartValueMaxValueIsCorrectAC(false, false, false, false))\n        }\n    }, [counter.startCount, counter.maxCount, dispatch])\n\n    useEffect(() => {\n        if (counter.maxCount <= 0) {\n            dispatch(MaxValueIsCorrectAC(true))\n        } else if (counter.maxCount > 0 && counter.maxCount > counter.startCount) {\n            dispatch(MaxValueIsCorrectAC(false))\n        }\n    }, [counter.maxCount, counter.startCount, dispatch])\n\n    useEffect(() => {\n        if (!counter.incorrectValue && !counter.errorStartValue && !counter.errorMaxValue) {\n            dispatch(IncAndResetAndAutoButtonDisabledAC(false, false, false))\n        } else if (counter.incorrectValue) {\n            dispatch(IncAndResetAndAutoButtonDisabledAC(true, true, true))\n        } else if (counter.errorStartValue || counter.errorMaxValue) {\n            dispatch(IncAndResetAndAutoButtonDisabledAC(true, true, true))\n        }\n    }, [counter.incorrectValue, counter.errorStartValue, counter.errorMaxValue, dispatch])\n\n    useEffect(() => {\n        if (!counter.buttonSetDisabled) {\n            dispatch(EnterSetButtonTitleShowAC(true))\n        } else {\n            dispatch(EnterSetButtonTitleShowAC(false))\n        }\n    }, [counter.buttonSetDisabled, dispatch])\n\n    useEffect(() => {\n        if (counter.enterSetButton) {\n            dispatch(IncAndResetAndAutoButtonDisabledAC(true, true, true))\n        } else if (counter.count === counter.maxCount && !counter.incorrectValue) {\n            dispatch(IncAndResetAndAutoButtonDisabledAC(true, false, true))\n        } else if (counter.count !== counter.maxCount && counter.count !== counter.startCount && !counter.incorrectValue && !counter.autoButtonDisabled) {\n            dispatch(IncAndResetButtonDisabledAC(false, false))\n        } else if (counter.count === counter.startCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, true))\n        } else if (counter.count !== counter.startCount && !counter.incorrectValue) {\n            dispatch(ResetButtonDisabledAC(false))\n        }\n    }, [counter.enterSetButton, counter.count, counter.maxCount, counter.startCount, counter.incorrectValue, dispatch])\n\n    useEffect(() => {\n        dispatch(toggleAutoModeCounterTC())\n    }, [counter.count, counter.autoButtonDisabled, dispatch])\n\n    useEffect(() => {\n        if (counter.autoButtonDisabled) {\n            dispatch(IncButtonDisabledAC())\n        }\n    }, [counter.autoButtonDisabled, dispatch])\n\n\n    const activeButtonInc = () => {\n        dispatch(ActiveButtonIncAC(false))\n    }\n\n    const incCount = () => {\n        if (counter.count < counter.maxCount) {\n            dispatch(IncCountAC(counter.count))\n            dispatch(ActiveButtonIncAC(true))\n            setTimeout(activeButtonInc, 100)\n        }\n    }\n\n    const resetCount = () => {\n        counter.timerId && clearTimeout(counter.timerId)\n        dispatch(ResetCountAC(counter.startCount, counter.resetButtonDisabled))\n        dispatch(ResetAutoButtonDisabledAC())\n    }\n\n    const setButton = () => {\n        counter.timerId && clearTimeout(counter.timerId)\n        dispatch(SetButtonAC(counter.startCount, counter.maxCount, counter.buttonSetDisabled, counter.enterSetButton, counter.resetButtonDisabled))\n        dispatch(ResetAutoButtonDisabledAC())\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        }\n        dispatch(ChangeMaxValueAC(parseInt(e.currentTarget.value)))\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        }\n        dispatch(ChangeStartValueAC(parseInt(e.currentTarget.value)))\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        const focusButtonSet = document.getElementById('button-set')\n        if (e.key === 'Enter' && focusButtonSet) {\n            setButton()\n            focusButtonSet.focus()\n        }\n    }\n\n    const autoIncCount = () => {\n        counter.timerId && clearTimeout(counter.timerId)\n        dispatch(ToggleAutoButtonDisabledAC())\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-value'>\n                <Inputs maxValue={counter.maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={counter.startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={counter.errorMaxValue}\n                        errorStartValue={counter.errorStartValue}\n                        onKeyPress={onKeyPressHandler}\n                />\n                <div className='div-button'>\n                    <Button id={'button-set'}\n                            className={'button'}\n                            nameButton={'set'}\n                            onClick={setButton}\n                            disabled={counter.buttonSetDisabled}\n                    />\n                </div>\n            </div>\n            <div className='div-value'>\n                <Count value={counter.count}\n                       maxValue={counter.maxCount}\n                       incorrectValue={counter.incorrectValue}\n                       enterSetButton={counter.enterSetButton}\n                />\n                <div className='div-button'>\n                    <Button id={'button-inc'}\n                            className={counter.activeButtonInc ? 'button-active' : 'button'}\n                            onClick={incCount}\n                            disabled={counter.incButtonDisabled}\n                            nameButton={'inc'}\n                    />\n                    <Button id={'button-reset'}\n                            className={'button-v'}\n                            onClick={resetCount}\n                            disabled={counter.resetButtonDisabled}\n                            nameButton={'reset'}\n                    />\n                    <Button id={'button-auto'}\n                            className={'button-v'}\n                            onClick={autoIncCount}\n                            disabled={counter.autoButtonDisabled}\n                            nameButton={'auto'}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <AppWithRedux />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}