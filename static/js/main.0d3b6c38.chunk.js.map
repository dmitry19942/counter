{"version":3,"sources":["reportWebVitals.ts","Count.tsx","Button.tsx","Inputs.tsx","counter-reducer.ts","AppWithReducers.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Count","props","className","enterSetButton","incorrectValue","value","maxValue","Button","onClick","disabled","nameButton","Inputs","style","height","htmlFor","fontSize","marginRight","errorMaxValue","type","id","onChange","onChangeMaxValue","marginTop","errorStartValue","onChangeStartValue","startValue","counterReducer","state","action","count","maxCount","startCount","resetButtonDisabled","buttonSetDisabled","incButtonDisabled","StartValueMaxValueIsCorrectAC","MaxValueIsCorrectAC","IncAndResetButtonDisabledAC","EnterSetButtonTitleShowAC","AppWithReducers","useReducer","counter","dispatchToCounter","useEffect","e","parseInt","currentTarget","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3b6c38.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nexport type CountType = {\r\n    value: number\r\n    maxValue: number\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count (props: CountType) {\r\n    return (\r\n        <span className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.value === props.maxValue ? 'span-v' : 'span'}>\r\n             { props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value }\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    className: 'button' | 'button-v'\r\n    onClick: () => void\r\n    disabled: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return (\r\n            <button className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.nameButton}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n}\r\n\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"ml\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='ml' onChange={props.onChangeMaxValue} value={props.maxValue} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"sv\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='sv' onChange={props.onChangeStartValue} value={props.startValue}/>\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import {CounterStateType} from \"./AppWithReducers\";\r\n\r\nexport type IncCountActionType = {\r\n    type: 'INC-COUNT',\r\n    count: number\r\n}\r\n\r\nexport type ChangeMaxCountActionType = {\r\n    type: 'CHANGE-MAX-VALUE',\r\n    maxCount: number\r\n}\r\n\r\nexport type ChangeStartCountActionType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    startCount: number\r\n}\r\n\r\nexport type ResetCountActionType = {\r\n    type: 'RESET-COUNT',\r\n    count: number,\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type SetButtonActionType = {\r\n    type: 'SET-BUTTON',\r\n    count: number,\r\n    maxCount: number,\r\n    buttonSetDisabled: boolean,\r\n    enterSetButton: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type StartValueMaxValueIsCorrectActionType = {\r\n    type: 'START-VALUE-MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean,\r\n    errorStartValue: boolean,\r\n    buttonSetDisabled: boolean,\r\n    incorrectValue: boolean\r\n}\r\n\r\nexport type MaxValueIsCorrectActionType = {\r\n    type: 'MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean\r\n}\r\n\r\nexport type IncAndResetButtonDisabledActionType = {\r\n    type: 'INC-AND-RESET-BUTTON-DISABLED',\r\n    incButtonDisabled: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type EnterSetButtonTitleShowActionType = {\r\n    type: 'ENTER-SET-BUTTON-TITLE-SHOW',\r\n    enterSetButton: boolean\r\n}\r\n\r\ntype ActionsType = IncCountActionType | ChangeMaxCountActionType | ChangeStartCountActionType | ResetCountActionType | SetButtonActionType | StartValueMaxValueIsCorrectActionType | MaxValueIsCorrectActionType | IncAndResetButtonDisabledActionType | EnterSetButtonTitleShowActionType\r\n\r\n\r\nexport const counterReducer = (state: CounterStateType, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {...state, count: action.count + 1}\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return {...state, maxCount: action.maxCount}\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            return {...state, startCount: action.startCount}\r\n        }\r\n        case 'RESET-COUNT': {\r\n            return {...state, count: action.count, resetButtonDisabled: true}\r\n        }\r\n        case 'SET-BUTTON': {\r\n            return {...state, count: action.count, maxCount: action.maxCount, buttonSetDisabled: true, enterSetButton: false, resetButtonDisabled: true}\r\n        }\r\n        case 'START-VALUE-MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue, errorStartValue: action.errorStartValue, buttonSetDisabled: action.buttonSetDisabled, incorrectValue: action.incorrectValue}\r\n        }\r\n        case 'MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue}\r\n        }\r\n        case 'INC-AND-RESET-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: action.incButtonDisabled, resetButtonDisabled: action.resetButtonDisabled }\r\n        }\r\n        case 'ENTER-SET-BUTTON-TITLE-SHOW': {\r\n            return {...state, enterSetButton: action.enterSetButton}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const IncCountAC = (count: number): IncCountActionType => {\r\n    return {type: 'INC-COUNT', count}\r\n}\r\nexport const ChangeMaxValueAC = (maxCount: number): ChangeMaxCountActionType => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxCount}\r\n}\r\nexport const ChangeStartValueAC = (startCount: number): ChangeStartCountActionType => {\r\n    return {type: 'CHANGE-START-VALUE', startCount}\r\n}\r\nexport const ResetCountAC = (count: number, resetButtonDisabled: boolean): ResetCountActionType => {\r\n    return {type: 'RESET-COUNT', count, resetButtonDisabled}\r\n}\r\nexport const SetButtonAC = (count: number, maxCount: number, buttonSetDisabled: boolean, enterSetButton: boolean, resetButtonDisabled: boolean): SetButtonActionType => {\r\n    return {type: 'SET-BUTTON', count, maxCount, buttonSetDisabled, enterSetButton, resetButtonDisabled}\r\n}\r\nexport const StartValueMaxValueIsCorrectAC = (errorMaxValue: boolean, errorStartValue: boolean, buttonSetDisabled: boolean, incorrectValue: boolean): StartValueMaxValueIsCorrectActionType => {\r\n    return {type: 'START-VALUE-MAX-VALUE-IS-CORRECT', errorMaxValue, errorStartValue, buttonSetDisabled, incorrectValue}\r\n}\r\nexport const MaxValueIsCorrectAC = (errorMaxValue: boolean): MaxValueIsCorrectActionType => {\r\n    return {type: 'MAX-VALUE-IS-CORRECT', errorMaxValue}\r\n}\r\nexport const IncAndResetButtonDisabledAC = (incButtonDisabled: boolean, resetButtonDisabled: boolean): IncAndResetButtonDisabledActionType => {\r\n    return {type: 'INC-AND-RESET-BUTTON-DISABLED', incButtonDisabled, resetButtonDisabled}\r\n}\r\nexport const EnterSetButtonTitleShowAC = (enterSetButton: boolean): EnterSetButtonTitleShowActionType => {\r\n    return {type: 'ENTER-SET-BUTTON-TITLE-SHOW', enterSetButton}\r\n}\r\n","import React, {ChangeEvent, useEffect, useReducer} from 'react';\nimport './App.css';\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\nimport {\n    ChangeMaxValueAC,\n    ChangeStartValueAC,\n    counterReducer, EnterSetButtonTitleShowAC, IncAndResetButtonDisabledAC,\n    IncCountAC, MaxValueIsCorrectAC,\n    ResetCountAC,\n    SetButtonAC, StartValueMaxValueIsCorrectAC\n} from \"./counter-reducer\";\n\nexport type CounterStateType = {\n    count: number\n    maxCount: number\n    startCount: number\n    errorMaxValue: boolean\n    errorStartValue: boolean\n    buttonSetDisabled: boolean\n    enterSetButton: boolean\n    incorrectValue: boolean\n    incButtonDisabled: boolean\n    resetButtonDisabled: boolean\n}\n\nfunction AppWithReducers() {\n\n    const [counter, dispatchToCounter] = useReducer(counterReducer, {\n        count: -1,\n        maxCount: 10,\n        startCount: 0,\n        errorMaxValue: false,\n        errorStartValue: false,\n        buttonSetDisabled: true,\n        enterSetButton: false,\n        incorrectValue: false,\n        incButtonDisabled: false,\n        resetButtonDisabled: false\n    })\n    // const [count, dispatchToCount] = useReducer(counterReducer, -1)\n    // const [maxCount, dispatchToMaxCount] = useReducer(counterReducer, 10)\n    // const [startCount, dispatchToStartCount] = useReducer(counterReducer, 0)\n    //\n    // const [errorMaxValue, dispatchToErrorMaxValue] = useReducer(counterReducer, false)\n    // const [errorStartValue, dispatchToErrorStartValue] = useReducer(counterReducer, false)\n    // const [buttonSetDisabled, dispatchToButtonSetDisabled] = useReducer(counterReducer, true)\n    // const [enterSetButton, dispatchToEnterSetButton] = useReducer(counterReducer, false)\n    // const [incorrectValue, dispatchToIncorrectValue] = useReducer(counterReducer, false)\n    // const [incButtonDisabled, dispatchToIncButtonDisabled] = useReducer(counterReducer, false)\n    // const [resetButtonDisabled, dispatchToResetButtonDisabled] = useReducer(counterReducer, false)\n\n\n    useEffect(() => {\n        if (counter.startCount >= counter.maxCount) {\n            const action = StartValueMaxValueIsCorrectAC(true, true, true, true)\n            dispatchToCounter(action)\n        } else if (counter.startCount < 0) {\n            const action = StartValueMaxValueIsCorrectAC(false, true, true, true)\n            dispatchToCounter(action)\n        } else if (counter.startCount < counter.maxCount) {\n            const action = StartValueMaxValueIsCorrectAC(false, false, false, false)\n            dispatchToCounter(action)\n        }\n    }, [counter.startCount, counter.maxCount])\n\n    useEffect(() => {\n        if (counter.maxCount <= 0) {\n            const action = MaxValueIsCorrectAC(true)\n            dispatchToCounter(action)\n        } else if (counter.maxCount > 0 && counter.maxCount > counter.startCount) {\n            const action = MaxValueIsCorrectAC(false)\n            dispatchToCounter(action)\n        }\n    }, [counter.maxCount, counter.startCount])\n\n    useEffect(() => {\n        if (!counter.incorrectValue && !counter.errorStartValue && !counter.errorMaxValue) {\n            const action = IncAndResetButtonDisabledAC(false, false)\n            dispatchToCounter(action)\n        } else if (counter.incorrectValue) {\n            const action = IncAndResetButtonDisabledAC(true, true)\n            dispatchToCounter(action)\n        } else if (counter.errorStartValue || counter.errorMaxValue) {\n            const action = IncAndResetButtonDisabledAC(true, true)\n            dispatchToCounter(action)\n        }\n    }, [counter.incorrectValue, counter.errorStartValue, counter.errorMaxValue])\n\n    useEffect(() => {\n        if (!counter.buttonSetDisabled) {\n            const action = EnterSetButtonTitleShowAC(true)\n            dispatchToCounter(action)\n        } else {\n            const action = EnterSetButtonTitleShowAC(false)\n            dispatchToCounter(action)\n        }\n    }, [counter.buttonSetDisabled])\n\n    // useEffect(() => {\n    //     if (counter.enterSetButton) {\n    //         setIncButtonDisabled(true)\n    //         setResetButtonDisabled(true)\n    //     } else if (counter.count === counter.maxCount && !counter.incorrectValue) {\n    //         setIncButtonDisabled(true)\n    //         setResetButtonDisabled(false)\n    //     } else if (counter.count !== counter.maxCount && counter.count !== counter.startCount && !counter.incorrectValue) {\n    //         setIncButtonDisabled(false)\n    //         setResetButtonDisabled(false)\n    //     } else if (counter.count === counter.startCount && !counter.incorrectValue) {\n    //         setResetButtonDisabled(true)\n    //         setIncButtonDisabled(false)\n    //     } else if (counter.count !== counter.startCount && !counter.incorrectValue) {\n    //         setResetButtonDisabled(false)\n    //     }\n    // }, [counter.enterSetButton, counter.count, counter.maxCount, counter.startCount, counter.incorrectValue])\n    //\n    // useEffect(() => {\n    //     let valueAsString = localStorage.getItem('counterValue')\n    //     if (valueAsString) {\n    //         let newValue = JSON.parse(valueAsString)\n    //         setCount(newValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('counterValue', JSON.stringify(counter.count))\n    //     setButtonSetDisabled(true)\n    // }, [counter.count])\n    //\n    // useEffect(() => {\n    //     let maxValueAsString = localStorage.getItem('maxValue')\n    //     if (maxValueAsString) {\n    //         let newMaxValue = JSON.parse(maxValueAsString)\n    //         setMaxCount(newMaxValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('maxValue', JSON.stringify(counter.maxCount))\n    // }, [counter.maxCount])\n    //\n    // useEffect(() => {\n    //     let startValueAsString = localStorage.getItem('startValue')\n    //     if (startValueAsString) {\n    //         let newStartValue = JSON.parse(startValueAsString)\n    //         setStartCount(newStartValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('startValue', JSON.stringify(counter.startCount))\n    // }, [counter.startCount])\n\n    const incCount = () => {\n        if (counter.count < counter.maxCount) {\n            const action = IncCountAC(counter.count)\n            dispatchToCounter(action)\n        }\n    }\n\n    const resetCount = () => {\n        const action = ResetCountAC(counter.startCount, counter.resetButtonDisabled)\n        dispatchToCounter(action)\n    }\n\n    const setButton = () => {\n        const action = SetButtonAC(counter.startCount, counter.maxCount, counter.buttonSetDisabled, counter.enterSetButton, counter.resetButtonDisabled)\n        dispatchToCounter(action)\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        const action = ChangeMaxValueAC(parseInt(e.currentTarget.value))\n        dispatchToCounter(action)\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        const action = ChangeStartValueAC(parseInt(e.currentTarget.value))\n        dispatchToCounter(action)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-v'>\n                <Inputs maxValue={counter.maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={counter.startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={counter.errorMaxValue}\n                        errorStartValue={counter.errorStartValue}\n                />\n                <div className='div-b'>\n                    <Button className={'button'}\n                            nameButton={'set'}\n                            onClick={setButton}\n                            disabled={counter.buttonSetDisabled}\n                    />\n                </div>\n            </div>\n            <div className='div-v'>\n                <Count value={counter.count}\n                       maxValue={counter.maxCount}\n                       incorrectValue={counter.incorrectValue}\n                       enterSetButton={counter.enterSetButton}\n                />\n                <div className='div-b'>\n                    <Button className={'button'}\n                            onClick={incCount}\n                            disabled={counter.incButtonDisabled}\n                            nameButton={'inc'}\n                    />\n                    <Button className={'button-v'}\n                            onClick={resetCount}\n                            disabled={counter.resetButtonDisabled}\n                            nameButton={'reset'}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AppWithReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithReducers from \"./AppWithReducers\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWithReducers />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}