{"version":3,"sources":["Count.tsx","Button.tsx","Inputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Count","props","className","enterSetButton","incorrectValue","value","maxValue","Button","onClick","disabled","nameButton","Inputs","style","height","htmlFor","fontSize","marginRight","errorMaxValue","type","id","onChange","onChangeMaxValue","marginTop","errorStartValue","onChangeStartValue","startValue","App","useState","count","setCount","maxCount","setMaxCount","startCount","setStartCount","setErrorMaxValue","setErrorStartValue","buttonSetDisabled","setButtonSetDisabled","setEnterSetButton","setIncorrectValue","incButtonDisabled","setIncButtonDisabled","resetButtonDisabled","setResetButtonDisabled","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","maxValueAsString","newMaxValue","startValueAsString","newStartValue","e","parseInt","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87578bba.chunk.js","sourcesContent":["import React from \"react\";\r\nexport type CountType = {\r\n    value: number\r\n    maxValue: number\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count (props: CountType) {\r\n    return (\r\n        <span className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.value === props.maxValue ? 'span-v' : 'span'}>\r\n             { props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value }\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    className: 'button' | 'button-v'\r\n    onClick: () => void\r\n    disabled: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return (\r\n            <button className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.nameButton}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n}\r\n\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"ml\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='ml' onChange={props.onChangeMaxValue} value={props.maxValue} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"sv\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='sv' onChange={props.onChangeStartValue} value={props.startValue}/>\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\n\nfunction App() {\n\n    const [count, setCount] = useState(-1)\n    const [maxCount, setMaxCount] = useState(10)\n    const [startCount, setStartCount] = useState(0)\n\n    const [errorMaxValue, setErrorMaxValue] = useState<boolean>(false)\n    const [errorStartValue, setErrorStartValue] = useState<boolean>(false)\n    const [buttonSetDisabled, setButtonSetDisabled] = useState<boolean>(true)\n    const [enterSetButton, setEnterSetButton] = useState<boolean>(false)\n    const [incorrectValue, setIncorrectValue] = useState<boolean>(false)\n    const [incButtonDisabled, setIncButtonDisabled] = useState<boolean>(false)\n    const [resetButtonDisabled, setResetButtonDisabled] = useState<boolean>(false)\n\n\n    useEffect(() => {\n        if (startCount >= maxCount) {\n            setErrorMaxValue(true)\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if (startCount < 0) {\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if (startCount < maxCount) {\n            setErrorMaxValue(false)\n            setErrorStartValue(false)\n            setButtonSetDisabled(false)\n            setIncorrectValue(false)\n        }\n    }, [startCount, maxCount])\n\n    useEffect(() => {\n        if (maxCount <= 0) {\n            setErrorMaxValue(true)\n        } else if (maxCount > 0 && maxCount > startCount) {\n            setErrorMaxValue(false)\n        }\n    }, [maxCount, startCount])\n\n    useEffect(() => {\n        if (!incorrectValue && !errorStartValue && !errorMaxValue) {\n            setIncButtonDisabled(false)\n            setResetButtonDisabled(false)\n        } else if (incorrectValue) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(true)\n        } else if (errorStartValue || errorMaxValue) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(true)\n        }\n    }, [incorrectValue, errorStartValue, errorMaxValue])\n\n    useEffect(() => {\n        if (!buttonSetDisabled) {\n            setEnterSetButton(true)\n        } else {\n            setEnterSetButton(false)\n        }\n    }, [buttonSetDisabled])\n\n    useEffect(() => {\n        if (enterSetButton) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(true)\n        } else if (count === maxCount && !incorrectValue) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(false)\n        } else if (count !== maxCount && count !== startCount && !incorrectValue) {\n            setIncButtonDisabled(false)\n            setResetButtonDisabled(false)\n        } else if (count === startCount && !incorrectValue) {\n            setResetButtonDisabled(true)\n            setIncButtonDisabled(false)\n        } else if (count !== startCount && !incorrectValue) {\n            setResetButtonDisabled(false)\n        }\n    }, [enterSetButton, count, maxCount, startCount, incorrectValue])\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterValue')\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setCount(newValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(count))\n        setButtonSetDisabled(true)\n    }, [count])\n\n    useEffect(() => {\n        let maxValueAsString = localStorage.getItem('maxValue')\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            setMaxCount(newMaxValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxCount))\n    }, [maxCount])\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem('startValue')\n        if (startValueAsString) {\n            let newStartValue = JSON.parse(startValueAsString)\n            setStartCount(newStartValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startCount))\n    }, [startCount])\n\n    const incCount = () => {\n        if (count < maxCount) {\n            setCount(count + 1)\n        }\n    }\n\n    const resetCount = () => {\n        setCount(startCount)\n        setResetButtonDisabled(true)\n    }\n\n    const setButton = () => {\n        setCount(startCount)\n        setMaxCount(maxCount)\n        setButtonSetDisabled(true)\n        setEnterSetButton(false)\n        setResetButtonDisabled(true)\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxCount(parseInt(e.currentTarget.value))\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setStartCount(parseInt(e.currentTarget.value))\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-v'>\n                <Inputs maxValue={maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={errorMaxValue}\n                        errorStartValue={errorStartValue}\n                />\n                <div className='div-b'>\n                    <Button className={'button'}\n                            nameButton={'set'}\n                            onClick={setButton}\n                            disabled={buttonSetDisabled}\n                    />\n                </div>\n            </div>\n            <div className='div-v'>\n                <Count value={count}\n                       maxValue={maxCount}\n                       incorrectValue={incorrectValue}\n                       enterSetButton={enterSetButton}\n                />\n                <div className='div-b'>\n                    <Button className={'button'}\n                            onClick={incCount}\n                            disabled={incButtonDisabled}\n                            nameButton={'inc'}\n                    />\n                    <Button className={'button-v'}\n                            onClick={resetCount}\n                            disabled={resetButtonDisabled}\n                            nameButton={'reset'}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}