{"version":3,"sources":["reportWebVitals.ts","counter-reducer.ts","store.ts","localStorage.ts","Count.tsx","Button.tsx","Inputs.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","count","maxCount","startCount","errorMaxValue","errorStartValue","buttonSetDisabled","enterSetButton","incorrectValue","incButtonDisabled","resetButtonDisabled","activeButtonInc","rootReducer","combineReducers","counter","state","action","type","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","window","Count","props","className","value","maxValue","Button","id","onClick","disabled","nameButton","Inputs","style","height","htmlFor","fontSize","marginRight","onChange","onChangeMaxValue","onKeyPress","marginTop","onChangeStartValue","startValue","App","useState","setCount","setMaxCount","setStartCount","setErrorMaxValue","setErrorStartValue","setButtonSetDisabled","setEnterSetButton","setIncorrectValue","setIncButtonDisabled","setResetButtonDisabled","setActiveButtonInc","timerId","setTimerId","autoDisabled","setAutoDisabled","useEffect","valueAsString","newValue","maxValueAsString","newMaxValue","startValueAsString","newStartValue","setTimeout","activeButtonIncChanged","setButton","clearTimeout","e","currentTarget","parseInt","focusButtonSet","document","getElementById","key","focus","ReactDOM","render"],"mappings":"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","file":"static/js/main.4e634d79.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CounterStateType} from \"./AppWithRedux\";\r\n\r\n// types\r\ntype IncCountActionType = {\r\n    type: 'INC-COUNT'\r\n    count: number\r\n}\r\ntype ChangeMaxCountActionType = {\r\n    type: 'CHANGE-MAX-VALUE',\r\n    maxCount: number\r\n}\r\ntype ChangeStartCountActionType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    startCount: number\r\n}\r\ntype ResetCountActionType = {\r\n    type: 'RESET-COUNT',\r\n    count: number,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype SetButtonActionType = {\r\n    type: 'SET-BUTTON',\r\n    count: number,\r\n    maxCount: number,\r\n    buttonSetDisabled: boolean,\r\n    enterSetButton: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype StartValueMaxValueIsCorrectActionType = {\r\n    type: 'START-VALUE-MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean,\r\n    errorStartValue: boolean,\r\n    buttonSetDisabled: boolean,\r\n    incorrectValue: boolean\r\n}\r\ntype MaxValueIsCorrectActionType = {\r\n    type: 'MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean\r\n}\r\ntype IncAndResetButtonDisabledActionType = {\r\n    type: 'INC-AND-RESET-BUTTON-DISABLED',\r\n    incButtonDisabled: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\ntype EnterSetButtonTitleShowActionType = {\r\n    type: 'ENTER-SET-BUTTON-TITLE-SHOW',\r\n    enterSetButton: boolean\r\n}\r\ntype ResetButtonDisabledActionType = {\r\n    type: 'RESET-BUTTON-DISABLED',\r\n    resetButtonDisabled: boolean\r\n}\r\ntype ActiveButtonIncActionType = {\r\n    type: 'ACTIVE-BUTTON-INC',\r\n    activeButtonInc: boolean\r\n}\r\n\r\nexport type ActionsType = IncCountActionType | ChangeMaxCountActionType | ChangeStartCountActionType | ResetCountActionType | SetButtonActionType | StartValueMaxValueIsCorrectActionType | MaxValueIsCorrectActionType | IncAndResetButtonDisabledActionType | EnterSetButtonTitleShowActionType | ResetButtonDisabledActionType | ActiveButtonIncActionType\r\n\r\n// state\r\nconst initialState: CounterStateType = {\r\n    count: 0,\r\n    maxCount: 10,\r\n    startCount: 0,\r\n    errorMaxValue: false,\r\n    errorStartValue: false,\r\n    buttonSetDisabled: true,\r\n    enterSetButton: false,\r\n    incorrectValue: false,\r\n    incButtonDisabled: false,\r\n    resetButtonDisabled: false,\r\n    activeButtonInc: false\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {...state, count: action.count + 1 }\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return {...state, maxCount: action.maxCount}\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            return {...state, startCount: action.startCount}\r\n        }\r\n        case 'RESET-COUNT': {\r\n            return {...state, count: action.count, resetButtonDisabled: true}\r\n        }\r\n        case 'SET-BUTTON': {\r\n            return {...state, count: action.count, maxCount: action.maxCount, buttonSetDisabled: true, enterSetButton: false, resetButtonDisabled: true}\r\n        }\r\n        case 'START-VALUE-MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue, errorStartValue: action.errorStartValue, buttonSetDisabled: action.buttonSetDisabled, incorrectValue: action.incorrectValue}\r\n        }\r\n        case 'MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue}\r\n        }\r\n        case 'INC-AND-RESET-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: action.incButtonDisabled, resetButtonDisabled: action.resetButtonDisabled }\r\n        }\r\n        case 'ENTER-SET-BUTTON-TITLE-SHOW': {\r\n            return {...state, enterSetButton: action.enterSetButton}\r\n        }\r\n        case 'RESET-BUTTON-DISABLED': {\r\n            return {...state, resetButtonDisabled: action.resetButtonDisabled}\r\n        }\r\n        case 'ACTIVE-BUTTON-INC': {\r\n            return {...state, activeButtonInc: action.activeButtonInc}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const IncCountAC = (count: number): IncCountActionType => {\r\n    return {type: 'INC-COUNT', count}\r\n}\r\nexport const ChangeMaxValueAC = (maxCount: number): ChangeMaxCountActionType => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxCount}\r\n}\r\nexport const ChangeStartValueAC = (startCount: number): ChangeStartCountActionType => {\r\n    return {type: 'CHANGE-START-VALUE', startCount}\r\n}\r\nexport const ResetCountAC = (count: number, resetButtonDisabled: boolean): ResetCountActionType => {\r\n    return {type: 'RESET-COUNT', count, resetButtonDisabled}\r\n}\r\nexport const SetButtonAC = (count: number, maxCount: number, buttonSetDisabled: boolean, enterSetButton: boolean, resetButtonDisabled: boolean): SetButtonActionType => {\r\n    return {type: 'SET-BUTTON', count, maxCount, buttonSetDisabled, enterSetButton, resetButtonDisabled}\r\n}\r\nexport const StartValueMaxValueIsCorrectAC = (errorMaxValue: boolean, errorStartValue: boolean, buttonSetDisabled: boolean, incorrectValue: boolean): StartValueMaxValueIsCorrectActionType => {\r\n    return {type: 'START-VALUE-MAX-VALUE-IS-CORRECT', errorMaxValue, errorStartValue, buttonSetDisabled, incorrectValue}\r\n}\r\nexport const MaxValueIsCorrectAC = (errorMaxValue: boolean): MaxValueIsCorrectActionType => {\r\n    return {type: 'MAX-VALUE-IS-CORRECT', errorMaxValue}\r\n}\r\nexport const IncAndResetButtonDisabledAC = (incButtonDisabled: boolean, resetButtonDisabled: boolean): IncAndResetButtonDisabledActionType => {\r\n    return {type: 'INC-AND-RESET-BUTTON-DISABLED', incButtonDisabled, resetButtonDisabled}\r\n}\r\nexport const EnterSetButtonTitleShowAC = (enterSetButton: boolean): EnterSetButtonTitleShowActionType => {\r\n    return {type: 'ENTER-SET-BUTTON-TITLE-SHOW', enterSetButton}\r\n}\r\nexport const ResetButtonDisabledAC = (resetButtonDisabled: boolean): ResetButtonDisabledActionType => {\r\n    return {type: 'RESET-BUTTON-DISABLED', resetButtonDisabled}\r\n}\r\nexport const ActiveButtonIncAC = (activeButtonInc: boolean): ActiveButtonIncActionType => {\r\n    return {type: 'ACTIVE-BUTTON-INC', activeButtonInc}\r\n}\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"./localStorage\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n      counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {RootState} from \"./store\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: RootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport type CountType = {\r\n    value: number\r\n    maxValue: number\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count(props: CountType) {\r\n    return (\r\n        <span\r\n            className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.value === props.maxValue ? '' : 'span'}>\r\n             {props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value === props.maxValue ?\r\n                 <span className={'span-max-value'}>\r\n                 <div className={'span-count'}>{props.value}</div>\r\n                 <div className={'span-text'}>It is max value. Press 'reset'</div>\r\n             </span> : props.value}\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    id: string\r\n    className: 'button' | 'button-v' | 'button-active'\r\n    onClick: () => void\r\n    disabled: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return (\r\n            <button id={props.id} className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.nameButton} </button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"maxValue\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='maxValue' onChange={props.onChangeMaxValue} value={props.maxValue} onKeyPress={props.onKeyPress} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"startValue\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='startValue' onChange={props.onChangeStartValue} value={props.startValue} onKeyPress={props.onKeyPress} />\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\n\nfunction App() {\n\n    const [count, setCount] = useState(0)\n    const [maxCount, setMaxCount] = useState(10)\n    const [startCount, setStartCount] = useState(0)\n\n    const [errorMaxValue, setErrorMaxValue] = useState<boolean>(false)\n    const [errorStartValue, setErrorStartValue] = useState<boolean>(false)\n    const [buttonSetDisabled, setButtonSetDisabled] = useState<boolean>(true)\n    const [enterSetButton, setEnterSetButton] = useState<boolean>(false)\n    const [incorrectValue, setIncorrectValue] = useState<boolean>(false)\n    const [incButtonDisabled, setIncButtonDisabled] = useState<boolean>(false)\n    const [resetButtonDisabled, setResetButtonDisabled] = useState<boolean>(false)\n    const [activeButtonInc, setActiveButtonInc] = useState<boolean>(false)\n    const [timerId, setTimerId] = useState<any>(null)\n    const [autoDisabled, setAutoDisabled] = useState<boolean>(false)\n\n\n    useEffect(() => {\n        if (startCount === null) {\n            setErrorMaxValue(true)\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if (startCount >= maxCount) {\n            setErrorMaxValue(true)\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if (startCount < 0) {\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        } else if (startCount < maxCount) {\n            setErrorMaxValue(false)\n            setErrorStartValue(false)\n            setButtonSetDisabled(false)\n            setIncorrectValue(false)\n        }\n    }, [startCount, maxCount])\n\n    useEffect(() => {\n        if (maxCount <= 0) {\n            setErrorMaxValue(true)\n        } else if (maxCount > 0 && maxCount > startCount) {\n            setErrorMaxValue(false)\n        }\n    }, [maxCount, startCount])\n\n    useEffect(() => {\n        if (!incorrectValue && !errorStartValue && !errorMaxValue) {\n            setIncButtonDisabled(false)\n            setResetButtonDisabled(false)\n            setAutoDisabled(false)\n        } else if (incorrectValue) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(true)\n            setAutoDisabled(true)\n        } else if (errorStartValue || errorMaxValue) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(true)\n            setAutoDisabled(true)\n        }\n    }, [incorrectValue, errorStartValue, errorMaxValue])\n\n    useEffect(() => {\n        if (!buttonSetDisabled) {\n            setEnterSetButton(true)\n        } else {\n            setEnterSetButton(false)\n        }\n    }, [buttonSetDisabled])\n\n    useEffect(() => {\n        if (enterSetButton) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(true)\n            setAutoDisabled(true)\n        } else if (count === maxCount && !incorrectValue) {\n            setIncButtonDisabled(true)\n            setResetButtonDisabled(false)\n        } else if (count !== maxCount && count !== startCount && !incorrectValue) {\n            setIncButtonDisabled(false)\n            setResetButtonDisabled(false)\n        } else if (count === startCount && !incorrectValue) {\n            setIncButtonDisabled(false)\n            setResetButtonDisabled(true)\n        } else if (count !== startCount && !incorrectValue) {\n            setResetButtonDisabled(false)\n        }\n    }, [enterSetButton, count, maxCount, startCount, incorrectValue])\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterValue')\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setCount(newValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(count))\n    }, [count])\n\n    useEffect(() => {\n        let maxValueAsString = localStorage.getItem('maxValue')\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            setMaxCount(newMaxValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxCount))\n    }, [maxCount])\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem('startValue')\n        if (startValueAsString) {\n            let newStartValue = JSON.parse(startValueAsString)\n            setStartCount(newStartValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startCount))\n    }, [startCount])\n\n    useEffect(() => {\n        autoDisabled && setTimerId(setTimeout(() => {\n            if (count < maxCount) {\n                setCount(count + 1);\n            }\n        }, 1000))\n\n    },[count, maxCount, autoDisabled]);\n\n    const autoIncCount = () => {\n        timerId && clearTimeout(timerId)\n        setAutoDisabled(!autoDisabled)\n    }\n\n    const activeButtonIncChanged = () => {\n        setActiveButtonInc(false)\n    }\n\n    const incCount = () => {\n        if (count < maxCount) {\n            setCount(count + 1)\n            setActiveButtonInc(true)\n            setTimeout(activeButtonIncChanged, 100)\n        }\n    }\n\n    const resetCount = () => {\n        setCount(startCount)\n        setResetButtonDisabled(true)\n        timerId && clearTimeout(timerId)\n        setAutoDisabled(false)\n    }\n\n    const setButton = () => {\n        setCount(startCount)\n        setMaxCount(maxCount)\n        setButtonSetDisabled(true)\n        setEnterSetButton(false)\n        setResetButtonDisabled(true)\n        timerId && clearTimeout(timerId)\n        setAutoDisabled(false)\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) {\n            setErrorMaxValue(true)\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        }\n        setMaxCount(parseInt(e.currentTarget.value))\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) {\n            setErrorMaxValue(true)\n            setErrorStartValue(true)\n            setButtonSetDisabled(true)\n            setIncorrectValue(true)\n        }\n        setStartCount(parseInt(e.currentTarget.value))\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        const focusButtonSet = document.getElementById('button-set')\n        if (e.key === 'Enter' && focusButtonSet) {\n            setButton()\n            focusButtonSet.focus()\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-value'>\n                <Inputs maxValue={maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={errorMaxValue}\n                        errorStartValue={errorStartValue}\n                        onKeyPress={onKeyPressHandler}\n                />\n                <div className='div-button'>\n                    <Button id={'button-set'}\n                            className={'button'}\n                            nameButton={'set'}\n                            onClick={setButton}\n                            disabled={buttonSetDisabled}\n                    />\n                </div>\n            </div>\n            <div className='div-value'>\n                <Count value={count}\n                       maxValue={maxCount}\n                       incorrectValue={incorrectValue}\n                       enterSetButton={enterSetButton}\n                />\n                <div className='div-button'>\n                    <Button id={'button-inc'}\n                            className={activeButtonInc ? 'button-active' : 'button'}\n                            onClick={incCount}\n                            disabled={incButtonDisabled}\n                            nameButton={'inc'}\n                    />\n                    <Button id={'button-reset'}\n                            className={'button-v'}\n                            onClick={resetCount}\n                            disabled={resetButtonDisabled}\n                            nameButton={'reset'}\n                    />\n                    <Button id={'button-auto'}\n                            className={'button-v'}\n                            onClick={autoIncCount}\n                            disabled={autoDisabled}\n                            nameButton={'auto'}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n      {/*<AppWithRedux />*/}\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}