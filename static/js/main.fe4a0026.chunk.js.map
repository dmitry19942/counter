{"version":3,"sources":["reportWebVitals.ts","Count.tsx","Button.tsx","Inputs.tsx","counter-reducer.ts","AppWithRedux.tsx","store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Count","props","className","enterSetButton","incorrectValue","value","maxValue","Button","onClick","disabled","nameButton","Inputs","style","height","htmlFor","fontSize","marginRight","errorMaxValue","type","id","onChange","onChangeMaxValue","marginTop","errorStartValue","onChangeStartValue","startValue","initialState","count","maxCount","startCount","buttonSetDisabled","incButtonDisabled","resetButtonDisabled","StartValueMaxValueIsCorrectAC","MaxValueIsCorrectAC","IncAndResetButtonDisabledAC","EnterSetButtonTitleShowAC","AppWithRedux","dispatch","useDispatch","counter","useSelector","state","useEffect","action","valueAsString","localStorage","getItem","JSON","parse","e","parseInt","currentTarget","setItem","stringify","IncCountAC","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe4a0026.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nexport type CountType = {\r\n    value: number\r\n    maxValue: number\r\n    incorrectValue: boolean\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport function Count (props: CountType) {\r\n    return (\r\n        <span className={props.enterSetButton ? 'span-enter-set-button' : props.incorrectValue ? 'span-incorrect-value' : props.value === props.maxValue ? 'span-v' : 'span'}>\r\n             { props.enterSetButton ? `Enter values and press 'set'` : props.incorrectValue ? 'Incorrect value' : props.value }\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    className: 'button' | 'button-v'\r\n    onClick: () => void\r\n    disabled: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport function Button (props: ButtonPropsType) {\r\n    return (\r\n            <button className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.nameButton}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nexport type InputsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n}\r\n\r\n\r\nexport function Inputs(props: InputsType) {\r\n\r\n    return (\r\n        <span className='span'>\r\n            <div style={{height: '180px'}}>\r\n                <div >\r\n                    <label htmlFor=\"ml\" style={{fontSize: '25px', marginRight: '10px'}}>max value:</label>\r\n                     <input className={props.errorMaxValue ? 'error' : 'input'} type=\"number\" id='ml' onChange={props.onChangeMaxValue} value={props.maxValue} />\r\n                    </div>\r\n                <div style={{marginTop: '-5px'}}>\r\n                    <label htmlFor=\"sv\" style={{fontSize: '25px', marginRight: '10px'}}>start value:</label>\r\n            <input className={props.errorStartValue ? 'error' : 'input'} type=\"number\" id='sv' onChange={props.onChangeStartValue} value={props.startValue}/>\r\n                    </div>\r\n                </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import {AppDispatch} from \"./store\";\r\nimport {CounterStateType} from \"./AppWithRedux\";\r\n\r\nexport type IncCountActionType = {\r\n    type: 'INC-COUNT'\r\n    count: number\r\n}\r\n\r\nexport type ChangeMaxCountActionType = {\r\n    type: 'CHANGE-MAX-VALUE',\r\n    maxCount: number\r\n}\r\n\r\nexport type ChangeStartCountActionType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    startCount: number\r\n}\r\n\r\nexport type ResetCountActionType = {\r\n    type: 'RESET-COUNT',\r\n    count: number,\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type SetButtonActionType = {\r\n    type: 'SET-BUTTON',\r\n    count: number,\r\n    maxCount: number,\r\n    buttonSetDisabled: boolean,\r\n    enterSetButton: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type StartValueMaxValueIsCorrectActionType = {\r\n    type: 'START-VALUE-MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean,\r\n    errorStartValue: boolean,\r\n    buttonSetDisabled: boolean,\r\n    incorrectValue: boolean\r\n}\r\n\r\nexport type MaxValueIsCorrectActionType = {\r\n    type: 'MAX-VALUE-IS-CORRECT',\r\n    errorMaxValue: boolean\r\n}\r\n\r\nexport type IncAndResetButtonDisabledActionType = {\r\n    type: 'INC-AND-RESET-BUTTON-DISABLED',\r\n    incButtonDisabled: boolean,\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type EnterSetButtonTitleShowActionType = {\r\n    type: 'ENTER-SET-BUTTON-TITLE-SHOW',\r\n    enterSetButton: boolean\r\n}\r\n\r\nexport type ResetButtonDisabledActionType = {\r\n    type: 'RESET-BUTTON-DISABLED',\r\n    resetButtonDisabled: boolean\r\n}\r\n\r\nexport type SetButtonDisabledActionType = {\r\n    type: 'SET-BUTTON-DISABLED',\r\n    buttonSetDisabled: boolean\r\n}\r\n\r\nexport type SetCountFromLocalStorageActionType = {\r\n    type: 'SET-COUNT-FROM-LOCAL-STORAGE',\r\n    count: number\r\n}\r\n\r\nexport type ActionsType = IncCountActionType | ChangeMaxCountActionType | ChangeStartCountActionType | ResetCountActionType | SetButtonActionType | StartValueMaxValueIsCorrectActionType | MaxValueIsCorrectActionType | IncAndResetButtonDisabledActionType | EnterSetButtonTitleShowActionType | ResetButtonDisabledActionType | SetButtonDisabledActionType | SetCountFromLocalStorageActionType\r\n\r\nconst initialState: CounterStateType = {\r\n    count: 0,\r\n    maxCount: 10,\r\n    startCount: 0,\r\n    errorMaxValue: false,\r\n    errorStartValue: false,\r\n    buttonSetDisabled: true,\r\n    enterSetButton: false,\r\n    incorrectValue: false,\r\n    incButtonDisabled: false,\r\n    resetButtonDisabled: false\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {...state, count: action.count + 1 }\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return {...state, maxCount: action.maxCount}\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            return {...state, startCount: action.startCount}\r\n        }\r\n        case 'RESET-COUNT': {\r\n            return {...state, count: action.count, resetButtonDisabled: true}\r\n        }\r\n        case 'SET-BUTTON': {\r\n            return {...state, count: action.count, maxCount: action.maxCount, buttonSetDisabled: true, enterSetButton: false, resetButtonDisabled: true}\r\n        }\r\n        case 'START-VALUE-MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue, errorStartValue: action.errorStartValue, buttonSetDisabled: action.buttonSetDisabled, incorrectValue: action.incorrectValue}\r\n        }\r\n        case 'MAX-VALUE-IS-CORRECT': {\r\n            return {...state, errorMaxValue: action.errorMaxValue}\r\n        }\r\n        case 'INC-AND-RESET-BUTTON-DISABLED': {\r\n            return {...state, incButtonDisabled: action.incButtonDisabled, resetButtonDisabled: action.resetButtonDisabled }\r\n        }\r\n        case 'ENTER-SET-BUTTON-TITLE-SHOW': {\r\n            return {...state, enterSetButton: action.enterSetButton}\r\n        }\r\n        case 'RESET-BUTTON-DISABLED': {\r\n            return {...state, resetButtonDisabled: action.resetButtonDisabled }\r\n        }\r\n        case 'SET-BUTTON-DISABLED': {\r\n            return {...state, buttonSetDisabled: action.buttonSetDisabled }\r\n        }\r\n        case 'SET-COUNT-FROM-LOCAL-STORAGE': {\r\n            return {...state, count: action.count}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const IncCountAC = (count: number): IncCountActionType => {\r\n    return {type: 'INC-COUNT', count}\r\n}\r\nexport const ChangeMaxValueAC = (maxCount: number): ChangeMaxCountActionType => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxCount}\r\n}\r\nexport const ChangeStartValueAC = (startCount: number): ChangeStartCountActionType => {\r\n    return {type: 'CHANGE-START-VALUE', startCount}\r\n}\r\nexport const ResetCountAC = (count: number, resetButtonDisabled: boolean): ResetCountActionType => {\r\n    return {type: 'RESET-COUNT', count, resetButtonDisabled}\r\n}\r\nexport const SetButtonAC = (count: number, maxCount: number, buttonSetDisabled: boolean, enterSetButton: boolean, resetButtonDisabled: boolean): SetButtonActionType => {\r\n    return {type: 'SET-BUTTON', count, maxCount, buttonSetDisabled, enterSetButton, resetButtonDisabled}\r\n}\r\nexport const StartValueMaxValueIsCorrectAC = (errorMaxValue: boolean, errorStartValue: boolean, buttonSetDisabled: boolean, incorrectValue: boolean): StartValueMaxValueIsCorrectActionType => {\r\n    return {type: 'START-VALUE-MAX-VALUE-IS-CORRECT', errorMaxValue, errorStartValue, buttonSetDisabled, incorrectValue}\r\n}\r\nexport const MaxValueIsCorrectAC = (errorMaxValue: boolean): MaxValueIsCorrectActionType => {\r\n    return {type: 'MAX-VALUE-IS-CORRECT', errorMaxValue}\r\n}\r\nexport const IncAndResetButtonDisabledAC = (incButtonDisabled: boolean, resetButtonDisabled: boolean): IncAndResetButtonDisabledActionType => {\r\n    return {type: 'INC-AND-RESET-BUTTON-DISABLED', incButtonDisabled, resetButtonDisabled}\r\n}\r\nexport const EnterSetButtonTitleShowAC = (enterSetButton: boolean): EnterSetButtonTitleShowActionType => {\r\n    return {type: 'ENTER-SET-BUTTON-TITLE-SHOW', enterSetButton}\r\n}\r\nexport const ResetButtonDisabledAC = (resetButtonDisabled: boolean): ResetButtonDisabledActionType => {\r\n    return {type: 'RESET-BUTTON-DISABLED', resetButtonDisabled}\r\n}\r\nexport const SetButtonDisabledAC = (buttonSetDisabled: boolean): SetButtonDisabledActionType => {\r\n    return {type: 'SET-BUTTON-DISABLED', buttonSetDisabled}\r\n}\r\nexport const SetCountFromLocalStorageAC = (count: number): SetCountFromLocalStorageActionType => {\r\n    return {type: 'SET-COUNT-FROM-LOCAL-STORAGE', count}\r\n}\r\n\r\n\r\n\r\nexport const incCountTC = (count: number) => (dispatch: AppDispatch) => {\r\n    localStorage.setItem('counterValue', JSON.stringify(count + 1))\r\n    dispatch(IncCountAC(count))\r\n}\r\n\r\nexport const setCountFromLocalStorageTC = () => (dispatch: AppDispatch) => {\r\n    let valueAsString = localStorage.getItem('counterValue')\r\n        if (valueAsString) {\r\n             let newValue = JSON.parse(valueAsString)\r\n             dispatch(SetCountFromLocalStorageAC(newValue))\r\n       }\r\n}\r\n","import React, {ChangeEvent, useEffect} from 'react';\nimport './App.css';\nimport {Count} from \"./Count\";\nimport {Button} from \"./Button\";\nimport {Inputs} from \"./Inputs\";\nimport {\n    ChangeMaxValueAC,\n    ChangeStartValueAC,\n    EnterSetButtonTitleShowAC, IncAndResetButtonDisabledAC, incCountTC,\n    MaxValueIsCorrectAC, ResetButtonDisabledAC,\n    ResetCountAC,\n    SetButtonAC, SetButtonDisabledAC, setCountFromLocalStorageTC, StartValueMaxValueIsCorrectAC\n} from \"./counter-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"./store\";\n\n\nexport type CounterStateType = {\n    count: number\n    maxCount: number\n    startCount: number\n    errorMaxValue: boolean\n    errorStartValue: boolean\n    buttonSetDisabled: boolean\n    enterSetButton: boolean\n    incorrectValue: boolean\n    incButtonDisabled: boolean\n    resetButtonDisabled: boolean\n}\n\nfunction AppWithRedux() {\n\n    const dispatch = useDispatch()\n\n    const counter = useSelector<RootState, CounterStateType>(state => state.counter)\n\n    useEffect(() => {\n        if (counter.startCount >= counter.maxCount) {\n            dispatch(StartValueMaxValueIsCorrectAC(true, true, true, true))\n        } else if (counter.startCount < 0) {\n            dispatch(StartValueMaxValueIsCorrectAC(false, true, true, true))\n        } else if (counter.startCount < counter.maxCount) {\n            dispatch(StartValueMaxValueIsCorrectAC(false, false, false, false))\n        }\n    }, [counter.startCount, counter.maxCount, dispatch])\n\n    useEffect(() => {\n        if (counter.maxCount <= 0) {\n            const action = MaxValueIsCorrectAC(true)\n            dispatch(action)\n        } else if (counter.maxCount > 0 && counter.maxCount > counter.startCount) {\n            const action = MaxValueIsCorrectAC(false)\n            dispatch(action)\n        }\n    }, [counter.maxCount, counter.startCount, dispatch])\n\n    useEffect(() => {\n        if (!counter.incorrectValue && !counter.errorStartValue && !counter.errorMaxValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, false))\n        } else if (counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(true, true))\n        } else if (counter.errorStartValue || counter.errorMaxValue) {\n            dispatch(IncAndResetButtonDisabledAC(true, true))\n        }\n    }, [counter.incorrectValue, counter.errorStartValue, counter.errorMaxValue, dispatch])\n\n    useEffect(() => {\n        if (!counter.buttonSetDisabled) {\n            dispatch(EnterSetButtonTitleShowAC(true))\n        } else {\n            dispatch(EnterSetButtonTitleShowAC(false))\n        }\n    }, [counter.buttonSetDisabled, dispatch])\n\n    useEffect(() => {\n        if (counter.enterSetButton) {\n            dispatch(IncAndResetButtonDisabledAC(true, true))\n        } else if (counter.count === counter.maxCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(true, false))\n        } else if (counter.count !== counter.maxCount && counter.count !== counter.startCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, false))\n        } else if (counter.count === counter.startCount && !counter.incorrectValue) {\n            dispatch(IncAndResetButtonDisabledAC(false, true))\n        } else if (counter.count !== counter.startCount && !counter.incorrectValue) {\n            dispatch(ResetButtonDisabledAC(false))\n        }\n    }, [counter.enterSetButton, counter.count, counter.maxCount, counter.startCount, counter.incorrectValue, dispatch])\n\n    useEffect(() => {\n        dispatch(setCountFromLocalStorageTC())\n        dispatch(SetButtonDisabledAC(true))\n    }, [dispatch])\n\n    // useEffect(() => {\n    //     let valueAsString = localStorage.getItem('counterValue')\n    //     if (valueAsString) {\n    //         let newValue = JSON.parse(valueAsString)\n    //         setCount(newValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('counterValue', JSON.stringify(counter.count))\n    //     setButtonSetDisabled(true)\n    // }, [counter.count])\n\n    // useEffect(() => {\n    //     let maxValueAsString = localStorage.getItem('maxValue')\n    //     if (maxValueAsString) {\n    //         let newMaxValue = JSON.parse(maxValueAsString)\n    //         setMaxCount(newMaxValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('maxValue', JSON.stringify(counter.maxCount))\n    // }, [counter.maxCount])\n    //\n    // useEffect(() => {\n    //     let startValueAsString = localStorage.getItem('startValue')\n    //     if (startValueAsString) {\n    //         let newStartValue = JSON.parse(startValueAsString)\n    //         setStartCount(newStartValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('startValue', JSON.stringify(counter.startCount))\n    // }, [counter.startCount])\n\n    const incCount = () => {\n        if (counter.count < counter.maxCount) {\n            dispatch(incCountTC(counter.count))\n        }\n    }\n\n    const resetCount = () => {\n        dispatch(ResetCountAC(counter.startCount, counter.resetButtonDisabled))\n    }\n\n    const setButton = () => {\n        dispatch(SetButtonAC(counter.startCount, counter.maxCount, counter.buttonSetDisabled, counter.enterSetButton, counter.resetButtonDisabled))\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(ChangeMaxValueAC(parseInt(e.currentTarget.value)))\n    }\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(ChangeStartValueAC(parseInt(e.currentTarget.value)))\n    }\n\n    return (\n        <div className=\"App\">\n            <div className='div-v'>\n                <Inputs maxValue={counter.maxCount}\n                        onChangeMaxValue={onChangeMaxValue}\n                        startValue={counter.startCount}\n                        onChangeStartValue={onChangeStartValue}\n                        errorMaxValue={counter.errorMaxValue}\n                        errorStartValue={counter.errorStartValue}\n                />\n                <div className='div-b'>\n                    <Button className={'button'}\n                            nameButton={'set'}\n                            onClick={setButton}\n                            disabled={counter.buttonSetDisabled}\n                    />\n                </div>\n            </div>\n            <div className='div-v'>\n                <Count value={counter.count}\n                       maxValue={counter.maxCount}\n                       incorrectValue={counter.incorrectValue}\n                       enterSetButton={counter.enterSetButton}\n                />\n                <div className='div-b'>\n                    <Button className={'button'}\n                            onClick={incCount}\n                            disabled={counter.incButtonDisabled}\n                            nameButton={'inc'}\n                    />\n                    <Button className={'button-v'}\n                            onClick={resetCount}\n                            disabled={counter.resetButtonDisabled}\n                            nameButton={'reset'}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = ThunkDispatch<RootState, unknown, AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, AnyAction>\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <AppWithRedux />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}